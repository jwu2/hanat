#!/bin/bash

# This script will monitor peer NAT instance and take over its routes
# if communication with the other instance fails
# requires awscli package

echo `date` "-- Starting NAT monitor. Running as " `whoami`

# NAT instance variables
# Peer instance's IP to ping and route to grab if other node goes down
PEER_ID=<%= @peerinstanceid %>
PEER_RT_ID=<%= @peerroutetableid %>

# My route to grab when I come back up
My_RT_ID=<%= @myroutetableid %>

# Get the EC2 region
EC2_REGION=`curl -s http://169.254.169.254/latest/dynamic/instance-identity/document|sed -n 's/"region" : "\(.*\)"/\1/p'|sed 's/\,//g'`
if [ -z "$EC2_REGION" ]; then
    echo `date` "-- Error while getting region ID"
    exit 1
fi

# Health Check variables
Num_Pings=<%= @num_pings %>
Ping_Timeout=<%= @ping_timeout %>
Ping_Interval=<%= @ping_interval %>
Wait_Between_Pings=<%= @wait_between_pings %>
Wait_for_Instance_Stop=<%= @wait_for_instance_stop %>
Wait_for_Instance_Start=<%= @wait_for_instance_start %>

# Determine the NAT instance private IP so we can ping the peer NAT instance, take over
# its route, and reboot it.  Requires EC2 DescribeInstances, ReplaceRoute, and Start/RebootInstances
# permissions.  The following example EC2 Roles policy will authorize these commands:
# {
#  "Statement": [
#    {
#      "Action": [
#        "ec2:DescribeInstances",
#        "ec2:CreateRoute",
#        "ec2:ReplaceRoute",
#        "ec2:StartInstances",
#        "ec2:StopInstances"
#      ],
#      "Effect": "Allow",
#      "Resource": "*"
#    }
#  ]
# }

# Get this instance's ID
Instance_ID=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
if [ "$?" != "0" ]; then
    echo `date` "-- Error while getting instance ID"
    exit 1
fi

# Get the other NAT instance's IP
PEER_IP=`aws ec2 describe-instances --instance-ids $PEER_ID --region $EC2_REGION --output text --query 'Reservations[*].Instances[*].PrivateIpAddress'`
if [ "$?" != "0" ]; then
    echo `date` "-- Error while getting IP address for peer instance $PEER_ID"
    exit 1
fi

echo `date` "-- Adding this instance to $My_RT_ID default route on start"
aws ec2 replace-route --route-table-id $My_RT_ID --destination-cidr-block 0.0.0.0/0 --instance-id $Instance_ID --region $EC2_REGION
# If replace-route failed, then the route might not exist and may need to be created instead
if [ "$?" != "0" ]; then
    echo `date` "-- Error while replacing default route to this instance for route table $My_RT_ID"
    aws ec2 create-route --route-table-id $My_RT_ID --destination-cidr-block 0.0.0.0/0 --instance-id $Instance_ID --region $EC2_REGION
    if [ "$?" != "0" ]; then
        echo `date` "-- Error while creating default route to this instance for route table $My_RT_ID"
        exit 1
    fi
fi

while [ . ]; do
  # Check health of peer NAT instance
  pingresult=`ping -c $Num_Pings -W $Ping_Timeout -i $Ping_Interval $PEER_IP | grep time= | wc -l`
  # Check to see if any of the health checks succeeded, if not
  if [ "$pingresult" == "0" ]; then
    # Set HEALTHY variables to unhealthy (0)
    ROUTE_HEALTHY=0
    NAT_HEALTHY=0
    STOPPING_NAT=0
    while [ "$NAT_HEALTHY" == "0" ]; do
      # peer NAT instance is unhealthy, loop while we try to fix it
      if [ "$ROUTE_HEALTHY" == "0" ]; then
    	  echo `date` "-- peer NAT heartbeat failed, taking over $PEER_RT_ID default route"
        aws ec2 replace-route --route-table-id $PEER_RT_ID --destination-cidr-block 0.0.0.0/0 --instance-id $Instance_ID --region $EC2_REGION
        if [ "$?" != "0" ]; then
            echo `date` "-- Error while replacing default route to this instance for peer route table $PEER_RT_ID"
        fi
	      ROUTE_HEALTHY=1
      fi
      # Check NAT state to see if we should stop it or start it again
      NAT_STATE=`aws ec2 describe-instances --instance-ids $PEER_ID --region $EC2_REGION --output text --query 'Reservations[*].Instances[*].State.Name'`

      if [ "$NAT_STATE" == "stopped" ]; then
    	  echo `date` "-- Peer NAT instance stopped, starting it back up"
        aws ec2 start-instances --instance-ids $PEER_ID --region $EC2_REGION
	      NAT_HEALTHY=1
        sleep $Wait_for_Instance_Start
      else
	      if [ "$STOPPING_NAT" == "0" ]; then
    	    echo `date` "-- Peer NAT instance $NAT_STATE, attempting to reboot"
          aws ec2 reboot-instances --instance-ids $PEER_ID --region $EC2_REGION
	        STOPPING_NAT=1
	      fi
        sleep $Wait_for_Instance_Stop
      fi
    done
  else
    sleep $Wait_Between_Pings
  fi
done
